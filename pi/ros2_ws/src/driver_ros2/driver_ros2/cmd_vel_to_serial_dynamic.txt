import rclpy
from rclpy.node import Node
from geometry_msgs.msg import Twist
import serial
import time

class CmdVelToSerial(Node):
    def __init__(self):
        super().__init__('cmd_vel_to_serial')
        self.subscription = self.create_subscription(Twist, '/cmd_vel', self.cmd_vel_callback, 10)
        
        self.ser = serial.Serial('/dev/mcu', 115200, timeout=1)
        time.sleep(2)

        self.last_cmd_time = self.get_clock().now()
        self.timeout_sec = 2.0  # Timeout in seconds

        # Create a timer that runs at 10Hz to check for timeout
        self.timer = self.create_timer(0.1, self.check_timeout)

    def cmd_vel_callback(self, msg: Twist):
        self.last_cmd_time = self.get_clock().now()

        linear_power = int(msg.linear.x * 63)
        angular_power = int(msg.angular.z * 63)

        # Differential drive logic
        left_power = linear_power - angular_power
        right_power = linear_power + angular_power

        # Clamp values to -63 to 63
        left_power = max(-63, min(63, left_power))
        right_power = max(-63, min(63, right_power))

        # Send power to each motor
        self.send_serial(left_power, right_power, left_power, right_power)

    def check_timeout(self):
        time_since_last = (self.get_clock().now() - self.last_cmd_time).nanoseconds / 1e9
        if time_since_last > self.timeout_sec:
            self.stop()

    def forward(self):
        self.send_serial(12, 12, 11, 11)

    def turn_left(self):
        self.send_serial(-25, 25, -25, 29)

    def backward(self):
        self.send_serial(-11, -11, -12, -12)

    def turn_right(self):
        self.send_serial(25, -25, 25, -25)

    def stop(self):
        self.send_serial(0, 0, 0, 0)

    def send_serial(self, front_left, front_right, back_left, back_right):
        self.ser.write(bytes([64 + front_left, 192 - front_right, 64 + back_left, 192 - back_right]))

def main():
    rclpy.init()
    node = CmdVelToSerial()
    rclpy.spin(node)
    rclpy.shutdown()

if __name__ == '__main__':
    main()
